express = require 'express'
gutil = require 'gulp-util'
httpProxy = require 'http-proxy'
proxy = httpProxy.createProxyServer({})
wrench = require 'wrench'
liveReload = require 'connect-livereload'
activeUser = require "./activeUser.json"
proxyConfig = {}

module.exports = class GulpServer
  constructor: (options) ->
    options = options or {}
    @port = options.port or 3333
    @port = process.env.OPENSHIFT_NODEJS_PORT or @port
    @host = options.host or null
    @host = process.env.OPENSHIFT_NODEJS_IP or @host
    @proxyPort = options.proxyPort or 1337
    @proxyPort = process.env.G4MX_OSAPI_PORT or @proxyPort
    @proxyHost = options.proxyHost or 'localhost'
    @proxyHost = process.env.G4MX_OSAPI_HOST or @proxyHost
    @mocks = options.mocks or false
    @noLiveReload = options.noLiveReload or false
    @app = express()
    if @proxyHost.match(new RegExp('^http'))?
      @proxyHost = @proxyHost.split("/")[@proxyHost.split("/").length-1]
    proxyConfig = {
      host: @proxyHost
      port: @proxyPort
    }

    if @mocks
      baseDir = process.env.PWD + '/mocks/'
      files = wrench.readdirSyncRecursive baseDir
      files.forEach (toMock) =>
        apiString = toMock.match /^(.*)\.coffee$/
        if apiString
          route = '/' + apiString[1]
          gutil.log "Mocking " + gutil.colors.cyan(route)
          toMockRoute = require baseDir + toMock
          @app.use route, toMockRoute

    @app.use @apiProxy(@proxyHost, @proxyPort)
    if @noLiveReload
      gutil.log("live-reload is disabled")
    else
      @app.use liveReload
        port: 35729


    @app.use express.static process.env.PWD + '/_public'

  apiProxy: (host, port) ->
    (req, res, next) ->
      req.setMaxListeners(0)
      if req.url.match(new RegExp('^/api\/'))
        req.url = '/'+req.url.split('/').slice(2).join('/')
        req.headers.host = host
        req.headers.localDevUser = JSON.stringify(activeUser)
        proxy.web req, res, {target:proxyConfig}, (err) ->
          if err then console.log err
      else
        next()

  listen: () ->
    gutil.log \
      "Loading files from " +
      gutil.colors.cyan(process.env.PWD + '/_public')
    gutil.log \
      "Express server listening on " +
      gutil.colors.cyan(if @host then @host else "*") +
      ":" + gutil.colors.cyan(@port)
    gutil.log \
      "proxy forwarding to " + gutil.colors.cyan(@proxyHost) +
      ":" + gutil.colors.cyan(@proxyPort)

    @server = @app.listen @port, @host
    return @server

  close: () ->
    if @server
      @server.close()

