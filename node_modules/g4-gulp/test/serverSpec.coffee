rewire = require 'rewire'
chai = require 'chai'
expect = chai.expect
GulpServer = require '../server'
http = require 'http'
concat = require 'concat-stream'
express = require 'express'

describe 'server', () ->
  server = null

  afterEach ->
    server.close()

  describe 'constructor', () ->
    it 'should have sane defaults', (done) ->
      server = new GulpServer()
      expect(server.host).to.be.a('null')
      expect(server.port).to.equal 3333
      expect(server.proxyHost).to.equal 'localhost'
      expect(server.proxyPort).to.equal 1337
      done()

    it 'should accept overrides', (done) ->
      server = new GulpServer
        host: 'example.com'
        port: 1234
        proxyHost: 'proxy.com'
        proxyPort: 8645
      expect(server.host).to.equal 'example.com'
      expect(server.port).to.equal 1234
      expect(server.proxyHost).to.equal 'proxy.com'
      expect(server.proxyPort).to.equal 8645
      done()

    it 'should use environment variables', (done) ->
      MockedGulpServer = rewire '../server'
      MockedGulpServer.__set__
        process:
          env:
            OPENSHIFT_NODEJS_IP: 'example.com'
            OPENSHIFT_NODEJS_PORT: 1234
            G4MX_OSAPI_HOST: 'proxy.com'
            G4MX_OSAPI_PORT: 8645
      server = new MockedGulpServer()
      expect(server.host).to.equal 'example.com'
      expect(server.port).to.equal 1234
      expect(server.proxyHost).to.equal 'proxy.com'
      expect(server.proxyPort).to.equal 8645
      done()

    it 'should prefer environment variables', (done) ->
      MockedGulpServer = rewire '../server'
      MockedGulpServer.__set__
        process:
          env:
            OPENSHIFT_NODEJS_IP: 'example.com'
            OPENSHIFT_NODEJS_PORT: 1234
            G4MX_OSAPI_HOST: 'proxy.com'
            G4MX_OSAPI_PORT: 8645
      server = new MockedGulpServer
        host: 'bad.example.com'
        port: 7656
        proxyHost: 'bad.proxy.com'
        proxyPort: 3457
      expect(server.host).to.equal 'example.com'
      expect(server.port).to.equal 1234
      expect(server.proxyHost).to.equal 'proxy.com'
      expect(server.proxyPort).to.equal 8645
      done()

  describe 'mocking', () ->
    it 'should not have mocks when mocks are not enabled', (done) ->
      server = new GulpServer
        port: 3333
        mocks: false
      server.listen()

      http.get 'http://localhost:3333/api/hello/tommy', (res) ->
        expect(res.statusCode).to.equal 500
        done()

    it 'should have mocks when mocks are enabled', (done) ->
      server = new GulpServer
        port: 5678
        mocks: true
      server.listen()

      http.get 'http://localhost:5678/api/hello/tommy', (res) ->
        expect(res.statusCode).to.equal 200
        res.pipe concat (body) ->
          expect(body.toString()).to.equal 'hello tommy!'
          http.get 'http://localhost:5678/api/destroy/the/world/billy', (res) ->
            expect(res.statusCode).to.equal 200
            res.pipe concat (body) ->
              expect(body.toString()).to.equal 'billy will destroy the world!'
              done()

    describe 'body', () ->
      it 'should be able to use a json body', (done) ->
        server = new GulpServer
          port: 3333
          mocks: true
        server.listen()

        madLib =
          noun: "timmy"
          adjective: "crazy"
        options =
          hostname: "localhost"
          port: 3333
          path: '/api/body'
          method: 'POST'
          headers:
            "content-type": 'application/json'
        req = http.request options, (res) ->
          expect(res.statusCode).to.equal 200
          res.pipe concat (body) ->
            expect(body.toString()).to.equal "hello timmy you are crazy"
            done()
        req.write JSON.stringify madLib
        req.end()

  describe 'server', () ->
    it 'should forward the requests to localhost 1337', (done) ->
      server = new GulpServer
        port: 3333
        mocks: false
      server.listen()
      otherServer = null

      otherApp = express()
      otherApp.get '/hello/billy', () ->
        otherServer.close
        done()
      otherServer = otherApp.listen 1337
      http.get 'http://localhost:3333/api/hello/billy'

