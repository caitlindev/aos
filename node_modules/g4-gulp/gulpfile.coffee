gulp = require "gulp"
taskListing = require "gulp-task-listing"
gutil = require "gulp-util"
gulpIf = require "gulp-if"
watch = require 'gulp-watch'
plumber = require 'gulp-plumber'
coffee = require "gulp-coffee"
jade = require "gulp-jade"
tinylr = require "tiny-lr-fork"
uglify = require "gulp-uglify"
ngannotate = require "gulp-ng-annotate"
less = require 'gulp-less'
ngHtml = require 'gulp-ng-html2js'
ignore = require 'gulp-ignore'
path = require "path"
runSequence = require('run-sequence')
flatten = require "gulp-flatten"
concat = require "gulp-concat"
livereload = require "gulp-livereload"
docco = require "gulp-docco"
bowerSource = require "gulp-bower-source"
minifyCss = require "gulp-minify-css"
prefix = require('gulp-autoprefixer')
coffeelint = require 'gulp-coffeelint'
Server = require './server.coffee'
rename = require "gulp-rename"
imagemin = require('gulp-imagemin')
pngcrush = require('imagemin-pngcrush')
argv = require("yargs").argv
rimraf = require "gulp-rimraf"
bless = require "gulp-bless"
jeditor = require 'gulp-json-editor'

insert = require 'gulp-insert'
packageJson = require process.env.PWD + '/package.json'
lintConfig = __dirname + '/coffeelint.json'

jsFilter = '**/*.js'
csFilter = ['**/*.coffee', '!**/*.spec.coffee']
fontFilter = ['**/*.{eot,svg,ttf,otf,woff}']
imgFilter = ['**/*.{jpg,png,gif,svg}']
styleFilter = '**/*.{css,less}'
assetsStyleFilter = '**/**/**/*.css'
lessFilter = '**/*.less'

appCode = packageJson.repository.url.split("/")[packageJson.repository.url.split("/").length-1]
appCode = JSON.stringify(appCode)
appCode = appCode.replace(/.git/g,'')

filePaths =
  packageJson: './package.json'
  publicRoot: "./_public"
  publicJs: "./_public/js"
  publicCss: "./_public/css"
  publicImg: "./_public/img"
  publicFont: "./_public/fonts"
  publicModels: "./_public/models"
  srcJade: "./src/app/**/*.jade"
  bowerJade: "./bower_components/**/*.jade"
  srcIndex: "./src/index.jade"
  srcCSS: "./src/assets/**/*.css"
  srcLess: "src/**/*.less"
  assetCss: "./src/assets/**/*.css"
  assetImages: './src/assets/img/*.{jpg,png,gif,svg}'
  assetFonts: './src/assets/fonts/*.{eot,svg,ttf,otf,woff}'
  assetModels: './src/assets/models/*.json'
  allCoffee: "./src/**/*.coffee"
  srcCs: [ "./src/**/*.coffee", "!./src/**/*.spec.coffee" ]
  fontFontAwesome: "bower_components/font-awesome/fonts/*.*"
  watchVender: "bower_components/**/*.{coffee,js}"
  watchStyles: ["src/**/*.less", "src/**/*.css","bower_components/**/*.{less,css}",]
  watchSource: 'src/**/*.coffee'
  watchTemplates: ['src/**/*.jade', "bower_components/**/*.jade"]

# Error handling
handleError = (level, error) ->
  msg = error.toString()
  gutil.log msg
  process.exit 1 if level == "error"
  return
onError = (error) ->
  handleError.call this, "error", error
  return
onWarning = (error) ->
  handleError.call this, "warning", error
  return


pipeJs = () ->
  return gulp.src(filePaths.srcCs)
  .pipe(plumber())
  .pipe(coffee({
      bare: false
    }))
  .pipe(concat 'app.js')
  .pipe(insert.append('var version = "' + packageJson.version + '";'))
  .pipe(insert.append("var appCode =#{appCode}"))
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicJs))

pipeVendor = () ->
  return gulp.src(paths)
  .pipe(plumber())
  .pipe(gulpIf(/[.]coffee$/, coffee({
      bare: false
    })))
  .pipe(ignore.include(jsFilter))
  .pipe(concat 'vendor.js')
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicJs))

pipeJadeTemplates = () ->
  return gulp.src([filePaths.srcJade, filePaths.bowerJade])
  .pipe(plumber())
  .pipe(jade({
      pretty: true
    }))
  .pipe(ngHtml({
      moduleName: "src.templates"
      prefix: "src/app/"
      rename: (url) ->
        url.replace(".html", ".jade")
    }))
  .pipe(concat 'src.templates.js')
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicJs))

pipeStyles = () ->
  paths.push filePaths.srcLess
  paths.push filePaths.assetCss
  return gulp.src(paths)
  .pipe(plumber())
  .pipe(ignore.include(styleFilter))
  .pipe(gulpIf(/[.]less$/,less()))
  .pipe(prefix("last 2 version", "ie 8", "ie 9"))
  .pipe(concat 'app.css')
  .on('error',(e) -> onError(e))
  .pipe bless
    imports: true
  .pipe(gulp.dest(filePaths.publicCss))

pipeImages = () ->
  paths.push filePaths.assetImages
  return gulp.src(paths)
  .pipe(ignore.include(imgFilter))
  .pipe(flatten())
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicImg))

pipeBowerAssets = () ->
  # Isolate bower_assets
  bowerAssetPaths = []
  assetGlob = []
  for i of paths
    if paths[i].match /\/assets\/?$/
      bowerAssetPaths.push paths[i]

  # Copy as is
  for i of bowerAssetPaths
    sep = if bowerAssetPaths[i].match /.*\/$/ then '' else '/'
    assetGlob.push(bowerAssetPaths[i] + sep + '**/*.*')
  return assetGlob

paths = [ ]

gulp._maxListeners = 50

gulp.task('gulp-bower-source', () ->
  paths = bowerSource()
)

gulp.task('copy-file-api', () ->
  gulp.src(["bower_components/ng-file-upload/FileAPI.min.js", "bower_components/ng-file-upload/FileAPI.flash.swf"])
  .pipe(gulp.dest(filePaths.publicJs))
)

gulp.task('coffeelint', () ->
  gulp.src(filePaths.allCoffee)
  .pipe(plumber())
  .pipe(coffeelint({
      optFile: lintConfig
    }))
  .pipe(coffeelint.reporter())
  .pipe(coffeelint.reporter('fail'))
  .on('error',(e) -> onWarning(e))
)

gulp.task('docco', () ->
  gulp.src(filePaths.srcCs)
  .pipe(plumber())
  .pipe(docco())
  .on('error',(e) -> onWarning(e))
  .pipe(gulp.dest('./docs'))
)

gulp.task('source', () ->
  return pipeJs()
)

gulp.task('vendor', () ->
  return pipeVendor()
)

gulp.task('templates', () ->
  gulp.src(filePaths.srcIndex)
  .pipe(plumber())
  .pipe(jade({
      pretty : true
    }))
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicRoot))
  return pipeJadeTemplates()
)

gulp.task('styles', () ->
  return pipeStyles()
)

gulp.task('models', () ->
  gulp.src(filePaths.assetModels)
  .pipe(gulp.dest(filePaths.publicModels))
)

gulp.task('fonts', () ->
  paths.push filePaths.fontFontAwesome
  paths.push filePaths.assetFonts
  gulp.src(paths)
  .pipe(ignore.include(fontFilter))
  .pipe(flatten())
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicFont))
)

gulp.task('images', () ->
  return pipeImages()
)

gulp.task('bower_assets', () ->
  gulp.src(pipeBowerAssets())
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicRoot))
)

gulp.task('reload', () ->
  gulp.src("*.*")
  .on('error',(e) -> onWarning(e))
  .pipe(livereload())
)

gulp.task('watchStyles',() -> runSequence('styles', 'reload'))

gulp.task('watchTemplates',() -> runSequence('templates', 'reload'))

gulp.task('watchSource',() -> runSequence('source', 'reload'))

gulp.task('watchVendor',() -> runSequence('vendor', 'reload'))

gulp.task('watcher' , () ->
  if argv.server == 'false'
    gutil.log "No watcher"
  else
    watch({glob:filePaths.watchTemplates}, () -> gulp.start('watchTemplates'))

    watch({glob:filePaths.watchSource},() -> gulp.start('watchSource', 'coffeelint', 'docco'))

    watch({glob:filePaths.watchStyles}, () -> gulp.start("watchStyles"))

    watch({glob:filePaths.watchVender}, () -> gulp.start("watchVendor") )
)

gulp.task 'express', () ->
  if argv.server == 'false'
    gutil.log 'No server'
  else
    server = new Server argv
    server.listen()

gulp.task "compress_js", () ->
  pipeJs()
  .pipe(plumber())
  .pipe(ngannotate())
  .pipe(uglify({mangle: false}))
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicJs))
  pipeJadeTemplates()
  .pipe(plumber())
  .pipe(ngannotate())
  .pipe(uglify({mangle: false}))
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicJs))
  pipeVendor()
  .pipe(plumber())
  .pipe(ngannotate())
  .pipe(uglify({mangle: false}))
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicJs))


gulp.task "compress_styles", () ->
  pipeStyles()
  .pipe(minifyCss())
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicCss))
  gulp.src(pipeBowerAssets())
  .pipe(ignore.include(styleFilter))
  .pipe(minifyCss())
  .pipe(flatten())
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicCss))

gulp.task "compress_images", () ->
  gulp.src("#{filePaths.publicImg}/*.*")
  .pipe(imagemin({
      optimizationLevel: 3
      progressive: true
      use: [pngcrush({reduce:true})]
    }))
  .pipe(flatten())
  .pipe(rimraf(filePaths.publicImg))
  .on('error',(e) -> onError(e))
  .pipe(gulp.dest(filePaths.publicImg))

gulp.task "compress", () ->
  runSequence(
    'bower_assets'
    'compress_js'
    "compress_styles"
    "compress_images"
  )

gulp.task 'help', taskListing

gulp.task 'info', () ->
  gulp.src filePaths.packageJson
    .pipe rename 'info.json'
    .pipe jeditor (json) ->
      name = packageJson.name.replace /([^-]+)(-?)/g, (matches, match, isDash) ->
        if match.length is 2
          return match.toUpperCase() + ' '
        else if isDash.length > 0
          return match.charAt(0).toUpperCase() + match.slice(1) + ' '
        else
          return match.charAt(0).toUpperCase() + match.slice(1)
      retVal =
        name: packageJson?.g4name or name
        description: packageJson.description
      return retVal
    .pipe gulp.dest filePaths.publicRoot

gulp.task "production", [
  'gulp-bower-source'
  'models'
  'fonts'
  'templates'
  'images'
  "compress"
  'info'
]

gulp.task 'default', [
  'gulp-bower-source'
  'copy-file-api'
  'source'
  'vendor'
  'templates'
  'styles'
  'models'
  'bower_assets'
  'fonts'
  'images'
  'express'
  'watcher'
  'info'
]

module.exports = gulp
